#include <chrono>
#include <functional>
#include <memory>
#include <string>

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/float64_multi_array.hpp"
#include "eci/EciDemo113.h"
#include <stdlib.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include <unistd.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>

using namespace std::chrono_literals;
#define         Angle_Driver_Topic    "Joint_State_Send"
#define         PI                     3.14159265
extern WORD Get_position[12][64];

BYTE Rec_pos_lower_position[12][8]      = {
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},/* read_position */
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x40,0x64,0x60,0x00,0x00,0x00,0x00,0x00}
};
BYTE TX_Active_Move[12][8] = {
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},/* ACTIVE */
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},
    {0x00,0X01,0x00,0x00,0x00,0x00,0x00,0x00},

    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},/* PPM */
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},
    {0x22,0x60,0x60,0x00,0x01,0x00,0x00,0x00},

    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},/* DIASBALE */
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x06,0x00,0x00,0x00}
};

BYTE TX_pos_upper_follow_[12][8] = {
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},/* ENABLE */
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x0F,0x00,0x00,0x00},

    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},
    {0x22,0x7A,0x60,0x00,0x00,0x00,0x00,0x00},

    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},/* MOVE */
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00},
    {0x22,0x40,0x60,0x00,0x3F,0x00,0x00,0x00}
};
DWORD Move_lower_motorID[12]   = {0x605,0x607,0x606,0x608,0x605,0x607,0x606,0x608,0x605,0x607,0x606,0x608};


class Angle_Driver : public rclcpp::Node
{
public:
    Angle_Driver()
    : Node("Angle_Driver")
    {
        hResult = ECI_OK;
        hResult = EciDemo113();
        Can_Tx_Data( hResult, TX_Active_Move, Move_lower_motorID);
        printf("Motived!!!\n");
        subscription_ = this->create_subscription<std_msgs::msg::Float64MultiArray>(
            Angle_Driver_Topic, 10, std::bind(&Angle_Driver::topic_callback, this, std::placeholders::_1)
        );
    }

private:
    void topic_callback(const std_msgs::msg::Float64MultiArray::SharedPtr msg)
    {
        auto Angle = msg->data;
        motor_angle[0] = Angle[0]/PI*180;  //Left  Thigh
        motor_angle[1] = Angle[1]/PI*180;  //Right Thigh
        motor_angle[2] = Angle[2]/PI*180;  //Left  Calf
        motor_angle[3] = Angle[3]/PI*180;  //Right Calf
        motor_qc[0] = 1638400/360*motor_angle[0];
        motor_qc[1] = 1638400/360*motor_angle[1];
        motor_qc[2] = 1638400/360*motor_angle[2];
        motor_qc[3] = 1638400/360*motor_angle[3];
        for (int i = 0; i < 4; i++)
        {
            std::cout<<"Motor_Qc: %d"<<motor_qc[i]<<std::endl;
            TX_pos_upper_follow_[4][i+4] = ( -motor_qc[0]>>(8*i)&0xff);
            TX_pos_upper_follow_[5][i+4] = ( motor_qc[1]>>(8*i)&0xff);
            TX_pos_upper_follow_[6][i+4] = ( -motor_qc[2]>>(8*i)&0xff);
            TX_pos_upper_follow_[7][i+4] = ( motor_qc[3]>>(8*i)&0xff);
        }
        //Motive
        Can_Tx_Data( hResult, TX_pos_upper_follow_, Move_lower_motorID);
        // sleep(1);
        Can_Tx_Data( hResult, TX_pos_upper_follow_, Move_lower_motorID);
        // sleep(1);

        std::cout<<"Angle: "<<motor_angle[0]<<
        " "<<motor_angle[1]<<
        " "<<motor_angle[2]<<
        " "<<motor_angle[3]<<std::endl;
    }
    rclcpp::Subscription<std_msgs::msg::Float64MultiArray>::SharedPtr subscription_;
    ECI_RESULT hResult;
    float motor_angle[4];
    int motor_qc[4];
};

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);

    rclcpp::spin(std::make_shared<Angle_Driver>());
    rclcpp::shutdown();
    return 0;
}